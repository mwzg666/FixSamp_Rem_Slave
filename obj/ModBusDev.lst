C251 COMPILER V5.60.0,  ModBusDev                                                          22/05/24  17:23:32  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ModBusDev
OBJECT MODULE PLACED IN .\obj\ModBusDev.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE ModBus\ModBusDev.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\
                    -Flash;.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Temperaturn) PRINT(.\obj\ModBusDev.lst) OBJECT(.\obj\ModBusDev.obj
                    -) 

stmt  level    source

    1          #include <stdio.h>
    2          #include <stdlib.h>
    3          #include <string.h>
    4          
    5          
    6          #include "main.h"
    7          #include "Lcd.h"
    8          #include "LcdApp.h"
    9          #include "ModBus.h"
   10          #include "ModBusDev.h"
   11          #include "uart.h"
   12          
   13          
   14          MODBUS_PARAM xdata ModBusParam;
   15          MODBUS_STATUS xdata ModBusStatus;
   16          MODBUS_INFO xdata ModBusInfo;
   17          //extern BYTE Remflag;
   18          
   19          
   20          
   21          /*
   22          ModBus 帧格式
   23          1. 发送帧
   24          地址           命令     寄存器    寄存器数量    数据                                             CRC   
   25          0A(固定值)     Cmd(1)   RX(2)     n(2)          无数据表示读取、有数据表示写对应的寄存器 
   26          
   27          数据定义:  长度 + 数据
   28                     n*2    dat(n*2)
   29          
   30          2. 应答帧 -- 返回数据
   31          地址           命令   数据长度    数据      CRC   
   32          0A(固定值)     Cmd    n(1)        dat(n)
   33          
   34          3. 应答帧 -- 返回状态
   35          地址           命令   寄存器   寄存器数量     CRC   
   36          0A(固定值)     Cmd    Rx(2)    n(2)                       
   37          */
   38          
   39          
   40          DEVICE_READ_ACK xdata  DevReadAck;   
   41          
   42          DEVICE_WRITE_ACK xdata DevWriteAck;
   43          
   44          HOST_SEND_FRAME xdata RecvFrame;   
   45          
   46          
   47          // 把浮点数转换为大端打包到发送数据区
   48          void PackageFloatValue(WORD Offset, float val)
   49          {
   50   1          BYTE temp[4] = {0};
   51   1          FloatToBytes(val,temp);
   52   1          memcpy(&DevReadAck.Data[Offset], temp, 4);  
   53   1      }
   54          
   55          void PackageDWordValue(WORD Offset, DWORD val)
   56          {
   57   1          DWORD temp;
C251 COMPILER V5.60.0,  ModBusDev                                                          22/05/24  17:23:32  PAGE 2   

   58   1          temp = SwEndian(val);
   59   1          memcpy(&DevReadAck.Data[Offset], &temp, 4);  
   60   1      }
   61          
   62          
   63          void PackageWordValue(WORD Offset, WORD val)
   64          {
   65   1          BYTE temp[2] = {0};
   66   1          temp[0] = (BYTE)(val >> 8);
   67   1          temp[1] = (BYTE)val;
   68   1          memcpy(&DevReadAck.Data[Offset], temp, 2);  
   69   1      }
   70          
   71          // 把寄存器值包装到发送缓存
   72          
   73          bool PackageReg(WORD Reg, WORD Count)
   74          {
   75   1          DWORD offset;
   76   1          BYTE *p;
   77   1          SyncModBusDev();
   78   1      
   79   1          if (Count > 128)
   80   1          {
   81   2              return false;
   82   2          }
   83   1      
   84   1          if (Reg >= MODBUS_PARAM_ADD)
   85   1          {
   86   2              offset = (Reg - MODBUS_PARAM_ADD)*2;
   87   2              if (offset >= sizeof(MODBUS_PARAM))
   88   2              {
   89   3                  return false;
   90   3              }
   91   2              
   92   2              p = (BYTE *)&ModBusParam;
   93   2              memcpy(DevReadAck.Data, &p[offset], Count*2); 
   94   2          }
   95   1          else
   96   1          {
   97   2              return false;
   98   2          }
   99   1          return true;
  100   1      }
  101          
  102          BYTE ReadAck()
  103          {
  104   1          WORD i = 0;
  105   1          WORD crc,SendLen; 
  106   1          memset(&DevReadAck, 0, sizeof(DEVICE_READ_ACK));
  107   1          //printf("READ-Yes\r\n");
  108   1          DevReadAck.Address = RecvFrame.Address; 
  109   1          DevReadAck.FunctionCode = RecvFrame.FunctionCode;
  110   1          
  111   1          SendLen = 2;
  112   1      
  113   1          DevReadAck.DataLen = RecvFrame.RegCount*2; 
  114   1          SendLen ++;
  115   1          PackageReg(RecvFrame.RegAddr, RecvFrame.RegCount);
  116   1          SendLen += DevReadAck.DataLen;
  117   1          
  118   1          // 计算CRC , 并添加到数据后面
  119   1          i = DevReadAck.DataLen;
  120   1          crc = CRC16Calc((BYTE *)&DevReadAck, SendLen);
  121   1          DevReadAck.Data[i]  = (BYTE)(crc);
  122   1          DevReadAck.Data[i+1] = (BYTE)(crc>>8);
  123   1          SendLen += 2;  
C251 COMPILER V5.60.0,  ModBusDev                                                          22/05/24  17:23:32  PAGE 3   

  124   1          Uart4Send((BYTE *)&DevReadAck, (BYTE)SendLen);
  125   1          return true;
  126   1      }
  127          
  128          // 发送写命令应答
  129          void WriteAck()
  130          {
  131   1          WORD crc;
  132   1          
  133   1          memset(&DevWriteAck, 0, sizeof(DEVICE_WRITE_ACK));
  134   1          
  135   1          DevWriteAck.Address = RecvFrame.Address;  //Param.DevAddr;
  136   1          DevWriteAck.FunctionCode = RecvFrame.FunctionCode;
  137   1          DevWriteAck.RegAddr = RegSw(RecvFrame.RegAddr);
  138   1          DevWriteAck.RegCount = RegSw(RecvFrame.RegCount);
  139   1      
  140   1          crc = CRC16Calc((BYTE *)&DevWriteAck, 6);
  141   1          DevWriteAck.Crc = (crc<<8)&0xFF00;
  142   1          DevWriteAck.Crc |= crc>>8;
  143   1          Uart4Send((BYTE *)&DevWriteAck, sizeof(DEVICE_WRITE_ACK));
  144   1      }
  145          
  146          
  147          void ModBusSaveParam()
  148          {
  149   1          BYTE i = 0;
  150   1          RemRegAddr.SypAddr = ModBusParam.Addr;
  151   1          SysParam.Enable = ModBusParam.ChEnable;
  152   1          SysParam.ChModeCtl = ModBusParam.ChModeCtl;
  153   1          SysParam.RemCtlFlag = ModBusParam.RemCtlFlag;
  154   1          RemRunStatus.RemRun= ModBusParam.RunStatus; 
  155   1          //SysParam.Address = ModBusParam.Address;
  156   1      
  157   1          WriteParam();
  158   1      }
  159          
  160          
  161          // 把接收到的数据加载到寄存器中
  162          bool WriteRegValue(WORD Reg, WORD Count)
  163          {
  164   1          BYTE *p;
  165   1          int len,offset;
  166   1      
  167   1          //if ((Reg == MODBUS_PARAM_ADD) && (Count == 13)) 
  168   1          if (Reg == MODBUS_PARAM_ADD) 
  169   1          {
  170   2              len = sizeof(MODBUS_PARAM);
  171   2              offset = (Reg - MODBUS_PARAM_ADD) * 2;
  172   2              if ( (offset + Count * 2) > len )
  173   2              {
  174   3                  return false;
  175   3              }
  176   2              p = (BYTE *)&ModBusParam;
  177   2              memcpy(&p[offset], &RecvFrame.Data[1],Count*2);
  178   2      
  179   2              ModBusSaveParam();
  180   2              return true;
  181   2          }
  182   1          return false;
  183   1      }
  184          
  185          
  186          
  187          // 设寄存器值
  188          void SetRegValue()
  189          {
C251 COMPILER V5.60.0,  ModBusDev                                                          22/05/24  17:23:32  PAGE 4   

  190   1          if (RecvFrame.Data[0] == 0)
  191   1          {
  192   2              return;
  193   2          }
  194   1      
  195   1          if (WriteRegValue(RecvFrame.RegAddr, RecvFrame.RegCount))
  196   1          {
  197   2              WriteAck();
  198   2          }
  199   1      }
  200          
  201          //Modbus读写解析
  202          void HndModBusRecv(BYTE *buf, BYTE len)
  203          {
  204   1          if (!ValidRtuFrame(buf, len))
  205   1          { 
  206   2              //Error();
  207   2              return;
  208   2          }
  209   1          memset(&RecvFrame, 0, sizeof(HOST_SEND_FRAME));
  210   1          memcpy(&RecvFrame, buf, len);
  211   1      
  212   1          if (RecvFrame.Address != 2)
  213   1          {
  214   2              return;
  215   2          }
  216   1          
  217   1          switch(RecvFrame.FunctionCode)
  218   1          {
  219   2              case CMD_READ_REG: ReadAck();  break;
  220   2              case CMD_WRITE_REG: SetRegValue();  break;
  221   2          }
  222   1      }
  223          
  224          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       954     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       587     ------
  xdata-const size     =    ------     ------
  edata size           =        64     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
