C251 COMPILER V5.60.0,  ModBus                                                             22/03/24  16:36:51  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ModBus
OBJECT MODULE PLACED IN .\obj\ModBus.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE ModBus\ModBus.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\Fla
                    -sh;.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Temperaturn) PRINT(.\obj\ModBus.lst) OBJECT(.\obj\ModBus.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "ModBus.h"
    3          
    4          //校验和计算
    5          WORD CRC16Calc(BYTE *dataBuff, DWORD dataLen)
    6          {
    7   1          DWORD CRCResult = 0xFFFF;
    8   1          DWORD i,j;
    9   1          
   10   1          for (i = 0; i < dataLen; i++)
   11   1          {   
   12   2              CRCResult = CRCResult ^ dataBuff[i];
   13   2              for (j = 0; j < 8; j++)
   14   2              {
   15   3                  if ((CRCResult & 1) == 1)
   16   3                  {
   17   4                      CRCResult = (CRCResult >> 1) ^ 0xA001;
   18   4                  }
   19   3                  else
   20   3                  {
   21   4                      CRCResult >>= 1;
   22   4                  }
   23   3              }
   24   2          } 
   25   1          return (WORD)CRCResult;
   26   1      }
   27          
   28          
   29          /*转化字节序*/
   30          void ByteConvert(BYTE *InData, BYTE *OutData)
   31          {  
   32   1          OutData[3] = InData[0];
   33   1          OutData[2] = InData[1];
   34   1          OutData[1] = InData[2];
   35   1          OutData[0] = InData[3];  
   36   1      }
   37          
   38          // 把浮点数转化为大端字节数组
   39          void FloatToBytes(float dat, BYTE *res)
   40          {
   41   1          BYTE temp[4] = {0};
   42   1          memcpy(temp, &dat, 4);
   43   1          ByteConvert(temp, res);
   44   1      }
   45          
   46          // 把大端字节数组转化为浮点数
   47          float BytesToFloat(BYTE *dat)
   48          {
   49   1          float ret;
   50   1          BYTE temp[4] = {0};
   51   1          ByteConvert(dat, temp);
   52   1          memcpy(&ret, temp, 4);
   53   1          return ret;
   54   1      }
   55          
   56          // 把大端字节数组转化为32bit整数
   57          DWORD BytesToDWord(BYTE *dat)
   58          {
C251 COMPILER V5.60.0,  ModBus                                                             22/03/24  16:36:51  PAGE 2   

   59   1          DWORD ret,temp;
   60   1          memcpy(&temp, dat, 4);
   61   1          ret = SwEndian(temp);
   62   1          return ret;
   63   1      }
   64          
   65          // 把大端字节数组转化为16bit整数
   66          WORD BytesToWord(BYTE *dat)
   67          {
   68   1          WORD ret,temp;
   69   1          memcpy(&temp, dat, 2);
   70   1          ret = SwEndianW(temp);
   71   1          return ret;
   72   1      }
   73          
   74          
   75          /*********************************
   76          函数名称:DWORD SwEndian(DWORD input)
   77          函数功能:大小端整数互换
   78          作者:姚明钢
   79          修改记录:2018.5.4
   80          **********************************/
   81          DWORD SwEndian(DWORD input)
   82          { 
   83   1          DWORD temp=0;
   84   1          temp = ((input&0x000000FF)<<24) |
   85   1                 ((input&0x0000FF00)<<8) |
   86   1                 ((input&0x00FF0000)>>8) |
   87   1                 ((input&0xFF000000)>>24);
   88   1          return temp;
   89   1      }
   90          
   91          WORD SwEndianW(WORD input)
   92          { 
   93   1          WORD temp=0;
   94   1          temp = ((input&0x00FF)<<8) |
   95   1                 ((input&0xFF00)>>8);
   96   1          return temp;
   97   1      }
   98          
   99          
  100          WORD RegSw(WORD dat)
  101          {
  102   1          //WORD h,l;
  103   1          //h = (dat >> 8) &0x00FF;
  104   1          //l = dat & 0x00FF;
  105   1          //return (l<<8) | h;
  106   1          return dat;
  107   1      }
  108          
  109          
  110          // 判断帧的合法性
  111          BYTE ValidRtuFrame(BYTE *abyRdBuf,BYTE len)
  112          {
  113   1          WORD crc;
  114   1      
  115   1      
  116   1          //memset(&ReadAckFrame, 0, sizeof(DEVICE_READ_ACK));
  117   1          //memcpy(&ReadAckFrame, abyRdBuf, len);
  118   1          // 判断CRC
  119   1      
  120   1          crc = CRC16Calc(abyRdBuf,len);    
  121   1          //printf("crc = %x\r\n",crc);
  122   1          if (crc != 0)
  123   1          {
  124   2              return false;
C251 COMPILER V5.60.0,  ModBus                                                             22/03/24  16:36:51  PAGE 3   

  125   2          }
  126   1          
  127   1          return true;
  128   1      }
  129          
  130          
  131          
  132          // 判断帧的合法性
  133          BYTE ValidTcpFrame(BYTE *abyRdBuf,BYTE len)
  134          {
  135   1          BYTE rlen = 0;
  136   1      
  137   1          //memcpy(MbId, abyRdBuf, 2);
  138   1          //memset(&RecvBuf, 0, sizeof(DEVICE_READ_ACK));
  139   1          //memcpy(&RecvBuf, &abyRdBuf[6], len);
  140   1      
  141   1          rlen = abyRdBuf[5];
  142   1          if (rlen != len - 6)
  143   1          {
  144   2              return false;
  145   2          }
  146   1      
  147   1         
  148   1          return true;
  149   1      }
  150          
  151          
  152          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       701     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        99     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         8     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
