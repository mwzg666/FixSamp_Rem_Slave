C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LcdApp
OBJECT MODULE PLACED IN .\obj\LcdApp.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Lcd\LcdApp.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\Flash;
                    -.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Temperaturn) PRINT(.\obj\LcdApp.lst) OBJECT(.\obj\LcdApp.obj) 

stmt  level    source

    1          //#include "pch.h"
    2          
    3          #include "main.h"
    4          #include "Lcd.h"
    5          #include "LcdApp.h"
    6          #include "Temper.h"
    7          
    8          
    9          //#include "SerialPort.h"
   10          //#include "SampDemo.h"
   11          //#include "SampDemoDlg.h"
   12          
   13          #define Log //((CSampDemoDlg *)theApp.m_pMainWnd)->AddLog
   14          
   15          #define TEMP_BUF_LEN  128
   16          BYTE xdata TempBuf[TEMP_BUF_LEN] = {0};
   17          
   18          SHOW_PARAM xdata ShowParam;
   19          CHANNEL_PARAM xdata ChannelParam;
   20          
   21          RUN_INFO xdata RunInfo;
   22          DEV_INFO xdata DevInfo;
   23          
   24          bool NeedGetRet = false;
   25          
   26          char xdata ChannelStatus[CHANNLE_NUM][16] = {0};   // 状态文字
   27          BYTE  ChannelAlarm[CHANNLE_NUM] = {1,1,1,1,1,1,1,1};   // 默认状态正常
   28          BYTE  HisAlarm[CHANNLE_NUM] = {1,1,1,1,1,1,1,1};
   29          
   30          WORD xdata RemChStatus[CHANNLE_NUM] = {0,0,0,0,0,0,0,0};  //远程控制界面通道状态
   31          
   32          extern BYTE code VERSION;
   33          
   34          WORD code StatusPoint[CHANNLE_NUM] = 
   35          {
   36              0xA000,0xA100,0xA200,0xA300,0xA400,0xA500,0xA600,0xA700
   37          };
   38          
   39          WORD code TxtColor[5] = 
   40          {
   41              //禁用    正常    流量低     流量高     异常
   42              //白色    黄色     红色     红色      红色
   43              0xFFFF,0xFFE0,0xF800,0xF800,0xF800
   44          };
   45          
   46          char code ModeText[4][16]=
   47          {   
   48              "不单独取样",
   49              "定时取样",
   50              "定量取样",
   51              "手动取样"
   52          };
   53          void ShowDevInfo()
   54          {
   55   1          BYTE i,Cnt = 0;;
   56   1          for (i=0;i<8;i++)
   57   1          {
   58   2              if (SysParam.Enable & (1<<i))
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 2   

   59   2              {
   60   3                  Cnt ++;
   61   3              }
   62   2          }
   63   1          memset(&DevInfo, 0, sizeof(DEV_INFO));
   64   1          sprintf(DevInfo.DevType,"MNNA-1/%d",Cnt);
   65   1      
   66   1          sprintf(DevInfo.SoftVer,"V%d.%d.%d", VERSION/100, VERSION%100/10, VERSION%10 );
   67   1          LcdCmd(LCD_CMD_WRITE, REG_DEV_TYPE, (BYTE *)&DevInfo, 32);
   68   1      }
   69          
   70          // 启动界面开始按钮
   71          void StartButton()
   72          {
   73   1          WORD dat;
   74   1          if (!CheckDataLen(1))
   75   1          {
   76   2              return;
   77   2          }
   78   1      
   79   1          dat = PopWord();
   80   1          if (dat == BUTTON_OK)
   81   1          {
   82   2      
   83   2              StartSamp();
   84   2              NeedGetRet = true;
   85   2          }    
   86   1      }
   87          
   88          
   89          // 修改主界面的启停按钮 1：开始  0：停止
   90          void SetStartBtn(BYTE s)
   91          {
   92   1          PageSwitch = 1;
   93   1          TempBuf[0] = 0;
   94   1          TempBuf[1] = s;
   95   1          LcdCmd(LCD_CMD_WRITE, REG_DEV_CTL, TempBuf, 2);
   96   1          
   97   1      }
   98          
   99          // 登录密码
  100          void VerifyPassWord()
  101          {
  102   1          WORD PassWord;
  103   1          if (!CheckDataLen(1))
  104   1          {
  105   2              return;
  106   2          }
  107   1      
  108   1          PassWord = PopWord();
  109   1          if (PassWord == LOGIN_PASSWORD)
  110   1          {
  111   2              EnterPage(PAGE_SET);
  112   2              PageSwitch = 2;
  113   2              //Log(_T("登录成功\r\n"));
  114   2          }    
  115   1      }
  116          
  117          void ReturnStart()
  118          {
  119   1          WORD dat;
  120   1          if (!CheckDataLen(1))
  121   1          {
  122   2              return;
  123   2          }
  124   1      
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 3   

  125   1          dat = PopWord();
  126   1          if (dat == 0x31)    // 返回确认
  127   1          {
  128   2              //TemSendFlag = false;
  129   2              NeedGetRet = false;
  130   2              
  131   2              StopSamp(false);
  132   2              Delay(200);
  133   2              // 要把变量重新写为0
  134   2              memset(TempBuf,0,TEMP_BUF_LEN);
  135   2              LcdCmd(LCD_CMD_WRITE, REG_RETRUN, TempBuf, 2);
  136   2              Delay(200);
  137   2              EnterPage(PAGE_START);
  138   2              PageSwitch = 0;
  139   2              Delay(200);
  140   2              
  141   2          }   
  142   1          else if (dat == 0x0D0A)
  143   1          {
  144   2              if (RunStatus.Running)
  145   2              {
  146   3                  StopSamp(false);
  147   3              }
  148   2              else
  149   2              {
  150   3                  StartSamp();
  151   3              }
  152   2      
  153   2              // 要把变量重新写为0
  154   2              Delay(200);
  155   2              memset(TempBuf,0,TEMP_BUF_LEN);
  156   2              LcdCmd(LCD_CMD_WRITE, REG_RETRUN, TempBuf, 2);
  157   2              
  158   2          }
  159   1           
  160   1      }
  161          
  162          void GetRetCode()
  163          {
  164   1          BYTE len = 1;
  165   1      
  166   1          if (NeedGetRet)
  167   1          {
  168   2              LcdCmd(LCD_CMD_READ, REG_RETRUN, &len, 1);
  169   2          }
  170   1      }
  171          
  172          
  173          void SampCtl()
  174          {
  175   1          WORD dat;
  176   1          if (!CheckDataLen(1))
  177   1          {
  178   2              return;
  179   2          }
  180   1      
  181   1          dat = PopWord();
  182   1          if (dat == 0)
  183   1          {
  184   2              StartSamp();
  185   2             
  186   2          }  
  187   1          else
  188   1          {
  189   2              StopSamp(false);
  190   2              
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 4   

  191   2          }
  192   1      
  193   1          HideModule(MP_HINT_END);
  194   1         
  195   1      }
  196          
  197          
  198          // 主界面取样模式提示
  199          void ModeHint()
  200          {
  201   1          memset(TempBuf,0,TEMP_BUF_LEN);
  202   1          switch (SysParam.SampMode)
  203   1          {
  204   2              case MODE_TIME: sprintf((char *)TempBuf, "定时取样:%d分钟" ,    SysParam.SampTime); break;
  205   2              case MODE_VOL : sprintf((char *)TempBuf, "定量取样:%.1f立方米" , SysParam.SampVol);  break;
  206   2              case MODE_MAN : sprintf((char *)TempBuf, "手动取样"); break;
  207   2          }
  208   1          
  209   1          LcdCmd(LCD_CMD_WRITE, REG_MODEHINT, TempBuf, 32);
  210   1          //Delay(200);
  211   1          
  212   1      }
  213          
  214          
  215          // 调整状态文字的颜色
  216          void StatusColor(bool force)
  217          {
  218   1          BYTE i;
  219   1          for (i=0;i<CHANNLE_NUM;i++)
  220   1          {
  221   2              if ((ChannelAlarm[i] != HisAlarm[i]) || force)
  222   2              {
  223   3                  Delay(200);
  224   3                  SetTextColor(StatusPoint[i], SwWord(TxtColor[ChannelAlarm[i]]));
  225   3              }
  226   2          }
  227   1      }
  228          
  229          void SetRunTime(DWORD tm)
  230          {
  231   1          WORD h,m,s;
  232   1          h = (WORD)(tm/3600);
  233   1          m = (tm%3600)/60;
  234   1          s = tm%60;
  235   1          memset(RunInfo.RunTime,0,16);
  236   1          sprintf((char *)RunInfo.RunTime, "%04d:%02d:%02d",h,m,s);
  237   1          //WriteParam();
  238   1      }
  239          
  240          void ShowFlow()
  241          {
  242   1          SetRunTime(RunStatus.RunTime[8]);  // 运行时长
  243   1          LcdCmd(LCD_CMD_WRITE, REG_CH_FLOW, (BYTE *)&RunInfo, sizeof(RUN_INFO));
  244   1      }
  245          
  246          void ShowStatus()
  247          {
  248   1          BYTE i;
  249   1          memset(ChannelStatus,0,sizeof(ChannelStatus));
  250   1          for (i=0;i<CHANNLE_NUM;i++)
  251   1          {
  252   2              switch (ChannelAlarm[i])
  253   2              {
  254   3                  case ALM_CH_DISABLE:  sprintf(&ChannelStatus[i][0],"禁用");               break;
  255   3                  case ALM_FLOW_NOR:    sprintf(&ChannelStatus[i][0],"正\xfd常\xfd");       break;
  256   3                  case ALM_FLOW_LOW:    sprintf(&ChannelStatus[i][0],"流量偏小");             break;
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 5   

  257   3                  case ALM_FLOW_HIGH:   sprintf(&ChannelStatus[i][0],"流量偏大");             break;
  258   3                  case ALM_FLOW_ABNOR:  sprintf(&ChannelStatus[i][0],"通信异常");             break;
  259   3              }
  260   2          }
  261   1      
  262   1          LcdCmd(LCD_CMD_WRITE, REG_CH_STATUS, (BYTE *)ChannelStatus, 128);
  263   1      }
  264          
  265          //显示温度
  266          void ShowTemp(u16 TEMPER)
  267          {
  268   1          WORD i = TEMPER;
  269   1          LcdCmd(LCD_CMD_WRITE, REG_IO_TEMP, (BYTE *)&i,2);
  270   1      }
  271          
  272          //显示急停状态
  273          void ShowEmStop(bool on)
  274          {
  275   1          WORD i = on;
  276   1          LcdCmd(LCD_CMD_WRITE, REG_IO_EMSTOP, (BYTE *)&i,2);
  277   1      }
  278          
  279          //显示远程控制界面各通道的状态
  280          void ShowRemCh()
  281          {
  282   1          BYTE i = 0;
  283   1      
  284   1          LcdCmd(LCD_CMD_WRITE, REG_SP_VALVE1, (BYTE *)&RemChStatus[0], 16);
  285   1      }
  286          
  287          void SendParam()
  288          {
  289   1          BYTE i;
  290   1          
  291   1          for (i=0;i<CHANNLE_NUM;i++)
  292   1          {
  293   2              ShowParam.Flow[i] = SwWord((WORD)(SysParam.SampFlow[i]*10));
  294   2          }
  295   1          ShowParam.Address = SwWord((WORD)SysParam.Address);
  296   1          ShowParam.SampTime = SwWord((WORD)SysParam.SampTime);
  297   1          ShowParam.SampVol = SwWord((WORD)(SysParam.SampVol*10));
  298   1          ShowParam.BkLight = SwWord((WORD)SysParam.BkLight);
  299   1          ShowParam.AlarmThres = SwWord((WORD)SysParam.AlarmThres);
  300   1          ShowParam.SampMode = SwWord((WORD)SysParam.SampMode);
  301   1          ShowParam.ChOnOff = SwWord((WORD)SysParam.Enable);
  302   1      
  303   1          memset(ShowParam.ModeTxt,0,16);
  304   1          sprintf(ShowParam.ModeTxt, ModeText[SysParam.SampMode]);
  305   1          
  306   1          LcdCmd(LCD_CMD_WRITE, REG_SYS_PARAM, (BYTE *)&ShowParam, sizeof(SHOW_PARAM));
  307   1      }
  308          
  309          void SendChannelParam()
  310          {
  311   1          BYTE i;
  312   1          
  313   1          for (i=0;i<CHANNLE_NUM;i++)
  314   1          {
  315   2              
  316   2              memset(ChannelParam.ChannelModeTxt[i],0,16);
  317   2              ChannelParam.ChannelMode[i] = SwWord((WORD)(SysParam.Channel_SampMode[i]));
  318   2              
  319   2              ChannelParam.ChannelParm[i] = SwWord((WORD)(SysParam.Channel_SampFlowVol[i]*10));
  320   2              
  321   2              sprintf(ChannelParam.ChannelModeTxt[i], ModeText[SysParam.Channel_SampMode[i]]);
  322   2          }
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 6   

  323   1          LcdCmd(LCD_CMD_WRITE, REG_SYS_CHANNEL, (BYTE *)&ChannelParam, sizeof(CHANNEL_PARAM));
  324   1      }
  325          
  326          
  327          
  328          // 设置界面显示取样模式
  329          void SetSampMode()
  330          {
  331   1          SysParam.SampMode = (BYTE)PopWord();
  332   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  333   1          sprintf((char *)TempBuf, ModeText[SysParam.SampMode]);
  334   1          LcdCmd(LCD_CMD_WRITE, REG_MODE_TXT, TempBuf, 16);
  335   1      }
  336          
  337          void SetChannel1Mode()
  338          {
  339   1          SysParam.Channel_SampMode[0] = (BYTE)PopWord();
  340   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  341   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[0]]);
  342   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL1_MODETXT, TempBuf, 16);
  343   1      }
  344          void SetChannel2Mode()
  345          {
  346   1          SysParam.Channel_SampMode[1] = (BYTE)PopWord();
  347   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  348   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[1]]);
  349   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL2_MODETXT, TempBuf, 16);
  350   1      }
  351          
  352          void SetChannel3Mode()
  353          {
  354   1          SysParam.Channel_SampMode[2] = (BYTE)PopWord();
  355   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  356   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[2]]);
  357   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL3_MODETXT, TempBuf, 16);
  358   1      }
  359          void SetChannel4Mode()
  360          {
  361   1          SysParam.Channel_SampMode[3] = (BYTE)PopWord();
  362   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  363   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[3]]);
  364   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL4_MODETXT, TempBuf, 16);
  365   1      }
  366          
  367          void SetChannel5Mode()
  368          {
  369   1          SysParam.Channel_SampMode[4] = (BYTE)PopWord();
  370   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  371   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[4]]);
  372   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL5_MODETXT, TempBuf, 16);
  373   1      }
  374          void SetChannel6Mode()
  375          {
  376   1          SysParam.Channel_SampMode[5] = (BYTE)PopWord();
  377   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  378   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[5]]);
  379   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL6_MODETXT, TempBuf, 16);
  380   1      }
  381          
  382          void SetChannel7Mode()
  383          {
  384   1          SysParam.Channel_SampMode[6] = (BYTE)PopWord();
  385   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  386   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[6]]);
  387   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL7_MODETXT, TempBuf, 16);
  388   1      }
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 7   

  389          
  390          void SetChannel8Mode()
  391          {
  392   1          SysParam.Channel_SampMode[7] = (BYTE)PopWord();
  393   1          memset((char *)TempBuf,0,TEMP_BUF_LEN);
  394   1          sprintf((char *)TempBuf, ModeText[SysParam.Channel_SampMode[7]]);
  395   1          LcdCmd(LCD_CMD_WRITE, REG_SP_CHANNEL8_MODETXT, TempBuf, 16);
  396   1      }
  397          
  398          // 获取修改后的时间
  399          void GetInputTime()
  400          {
  401   1          BYTE len = 7;
  402   1          PageSwitch = 1;
  403   1          NeedGetRet = true;
  404   1          //Delay(300);
  405   1          LcdCmd(LCD_CMD_READ, REG_DATE_TIME, &len, 1);
  406   1      }
  407          
  408          // 在时间设置界面写入当前时间
  409          void SetCurTime()
  410          {
  411   1          LCD_FRAME *pFrame;
  412   1          LCD_DATE_TIME  ldt;
  413   1          
  414   1          BYTE dt[8] = {0};
  415   1          pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
  416   1          if (!CheckDataLen(4))
  417   1          {
  418   2              return;
  419   2          }
  420   1          
  421   1          memcpy(dt, &pFrame->Data[1], 8);
  422   1          
  423   1          ldt.YearH = SwWord((WORD)(dt[0]/10));
  424   1          ldt.YearL = SwWord((WORD)(dt[0]%10));
  425   1          ldt.Month = SwWord((WORD)dt[1]);
  426   1          ldt.Day   = SwWord((WORD)dt[2]);
  427   1      
  428   1          ldt.Hour   = SwWord((WORD)dt[4]);
  429   1          ldt.Minute = SwWord((WORD)dt[5]);
  430   1          ldt.Secend = SwWord((WORD)dt[6]);
  431   1      
  432   1          LcdCmd(LCD_CMD_WRITE, REG_DATE_TIME, (BYTE *)&ldt, sizeof(LCD_DATE_TIME));
  433   1          
  434   1      }
  435          
  436          
  437          void SetChCount()
  438          {
  439   1          BYTE dat = (BYTE)PopWord();
  440   1          BYTE i;
  441   1      
  442   1          SysParam.Enable = 0;
  443   1          for (i=0;i<dat;i++)
  444   1          {
  445   2              SysParam.Enable |= (1<<i);
  446   2          }
  447   1      
  448   1          ShowDevInfo();
  449   1      }
  450          
  451          
  452          
  453          void ReadReg()
  454          {
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 8   

  455   1          LCD_FRAME *pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
  456   1          WORD addr = SwWord(pFrame->Addr);
  457   1          //RemPageflag = 1;
  458   1          DebugInt(addr);
  459   1          switch (addr)
  460   1          {
  461   2              // 启动界面
  462   2              case REG_STRART:   StartButton();        break;  // 点击开始
  463   2              case REG_PASSWORD: VerifyPassWord();     break;    // 密码
  464   2      
  465   2              // 主界面
  466   2              case REG_DEV_CTL:  SampCtl();         break;  // 启停控制  
  467   2              case REG_RETRUN:   ReturnStart();     break;  // 返回启动页面
  468   2              case REG_TIME_BTN: GetLcdTime();      break;  // 点击时间
  469   2              case REG_HINT_ENTER: HideModule(MP_HINT_END);    break;
  470   2      
  471   2              // 参数设置界面
  472   2              case REG_SP_FLOW1:  SysParam.SampFlow[0] = ((float)PopWord())/10;  break; //0x4000
  473   2              case REG_SP_FLOW2:  SysParam.SampFlow[1] = ((float)PopWord())/10;break; //   0x4001
  474   2              case REG_SP_FLOW3:  SysParam.SampFlow[2] = ((float)PopWord())/10;break; //   0x4002
  475   2              case REG_SP_FLOW4:  SysParam.SampFlow[3] = ((float)PopWord())/10;break; //   0x4003
  476   2              case REG_SP_FLOW5:  SysParam.SampFlow[4] = ((float)PopWord())/10;break; //   0x4004
  477   2              case REG_SP_FLOW6:  SysParam.SampFlow[5] = ((float)PopWord())/10;break; //   0x4005
  478   2              case REG_SP_FLOW7:  SysParam.SampFlow[6] = ((float)PopWord())/10;break; //   0x4006
  479   2              case REG_SP_FLOW8:  SysParam.SampFlow[7] = ((float)PopWord())/10;break; //   0x4007
  480   2              
  481   2              case REG_SP_ADDR:   SysParam.Address    = (BYTE)PopWord();         break; //   0x4008
  482   2              case REG_SP_TIME:   SysParam.SampTime   = PopWord();               break; //   0x4009
  483   2              case REG_SP_VOL:    SysParam.SampVol    = ((float)PopWord())/10;   break; //   0x400A
  484   2              case REG_SP_LIGHT:  SetBkLight(true);                              break; //   0x400B
  485   2              case REG_SP_THRES:  SysParam.AlarmThres = (BYTE)PopWord();         break; //   0x400C
  486   2              case REG_SP_MODE:   SetSampMode();                                 break; //   0x400D        
  487   2              case REG_CH_ONOFF:  SysParam.Enable = (BYTE)PopWord();             break;
  488   2              
  489   2              case REG_SP_CHANNEL1: SysParam.Channel_SampFlowVol[0] = ((float)PopWord())/10;        break;
  490   2              case REG_SP_CHANNEL2: SysParam.Channel_SampFlowVol[1] = ((float)PopWord())/10;        break;
  491   2              case REG_SP_CHANNEL3: SysParam.Channel_SampFlowVol[2] = ((float)PopWord())/10;        break;
  492   2              case REG_SP_CHANNEL4: SysParam.Channel_SampFlowVol[3] = ((float)PopWord())/10;        break;
  493   2              case REG_SP_CHANNEL5: SysParam.Channel_SampFlowVol[4] = ((float)PopWord())/10;        break;
  494   2              case REG_SP_CHANNEL6: SysParam.Channel_SampFlowVol[5] = ((float)PopWord())/10;        break;
  495   2              case REG_SP_CHANNEL7: SysParam.Channel_SampFlowVol[6] = ((float)PopWord())/10;        break;
  496   2              case REG_SP_CHANNEL8: SysParam.Channel_SampFlowVol[7] = ((float)PopWord())/10;        break;   
  497   2              
  498   2              case REG_SP_CHANNEL1_MODE:    SetChannel1Mode();        break;
  499   2              case REG_SP_CHANNEL2_MODE:    SetChannel2Mode();        break;
  500   2              case REG_SP_CHANNEL3_MODE:    SetChannel3Mode();        break;
  501   2              case REG_SP_CHANNEL4_MODE:    SetChannel4Mode();        break;
  502   2              case REG_SP_CHANNEL5_MODE:    SetChannel5Mode();        break;
  503   2              case REG_SP_CHANNEL6_MODE:    SetChannel6Mode();        break;
  504   2              case REG_SP_CHANNEL7_MODE:    SetChannel7Mode();        break;
  505   2              case REG_SP_CHANNEL8_MODE:    SetChannel8Mode();      break;
  506   2              case REG_SP_RET:    ModeHint(); UpdataUI(); SaveParam(); ShowDevInfo();PageSwitch = 0;   break;  
             - // 点击参数界面返回按钮
  507   2              
  508   2              // 修改时间
  509   2              case REG_ADJ_TIME:   GetInputTime();    break;    // 时间修改完成，点击了返回按钮
  510   2              case REG_DATE_TIME:  SetLcdTime();      break;      // 修改屏幕RTC      
  511   2              case LCD_REG_RTC:    SetCurTime();      break;      // 获取屏幕时间返回
  512   2      
  513   2              // IO 测试
  514   2              case REG_IO_BUMP:    g_Output[GAS_BUMP]  = (BYTE)PopWord();      ShowTemp(TEMPER_Val);    break; 
             -// 0x5000
  515   2              case REG_IO_BLUE:    g_Output[LIGHT_BLUE]  = (BYTE)PopWord();    ShowTemp(TEMPER_Val);    break; 
             -// 0x5001
  516   2              case REG_IO_YELLOW:  g_Output[LIGHT_YELLOW]  = (BYTE)PopWord();  ShowTemp(TEMPER_Val);    break; 
             -// 0x5002
C251 COMPILER V5.60.0,  LcdApp                                                             30/05/24  09:54:01  PAGE 9   

  517   2              case REG_IO_SOUND:   g_Output[ALARM_SOUND]  = (BYTE)PopWord();   ShowTemp(TEMPER_Val);    break; 
             -// 0x5004
  518   2              case REG_IO_FAN:     ((BYTE)PopWord())?FANS_M(1):FANS_M(0);      ShowTemp(TEMPER_Val);    break; 
             -// 0x5005
  519   2      
  520   2              // 关于界面
  521   2              // case REG_CH_COUNT:  SetChCount();  break;  // 取消了，改到参数设置界面了
  522   2              
  523   2          }
  524   1      }
  525          
  526          
  527          void WriteReg()
  528          {
  529   1          #if 0
                   LCD_FRAME *pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
                   CString str;
                   str.Format(_T("Write:0x%04X\r\n"), SwWord(pFrame->Addr));
                   Log(str);
                   #endif
  535   1      }
  536          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4208     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       572     ------
  xdata-const size     =    ------     ------
  edata size           =        87     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       442     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
